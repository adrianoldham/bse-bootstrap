<:-.set athumb = @{ a,b: "<img src=\"" _ cfg.entryVar("uri", "images") _ '/' _ a.thumbImage _ '" width="' _ a.thumbWidth _ '" height="' _ a.thumbHeight _ '" class="' _ (b ? b : "bse_inline_thumb") _ '" />' }:>

<:-.set icon_class = @{ a: a.meta_by_name("icon") ? a.meta_by_name("icon").value_text : '' } :>

<:-.set get_price = @{ p: p.is_dynamic ? p.price("user", request.siteuser) : p.retailPrice } :>
<:-.set get_discountpc = @{ p: (( p.retailPrice - get_price(p) ) / p.retailPrice * 100 ).format("%.0f") } :>

<:-.set gst_divisor = ( cfg.entry("shop", "gst", 10 ) + 100 ) / 100 :>

<:-.set filesize = @{ size: ( size < 1024 ? size : size < 1024000 ? bse.number("kilobytes", size ) _ "k" : size < 1024000000 ? bse.number("megabytes", size ) _ "M" : bse.number("gigabytes", size ) _ "G") _ "B" } :>

<:-.set country_list = [ cfg.orderCS("country selector") ].map(@{k: { id: k, desc: cfg.entry("country selector", k ) }}) :>
<:-% country_list.unshift({id:"", desc:"Please select a country"}) :>

<:-.set au_state_list = [ cfg.orderCS("au state selector") ].map(@{k: { id: k, desc: cfg.entry("au state selector", k ) }}) :>
<:-% au_state_list.unshift({id:"", desc:"Please select a state"}) :>

<:-.set creditcard_list = [ cfg.orderCS("payment ccType") ].map(@{k: { id: k, desc: cfg.entry("payment ccType", k ) }}) :>
<:-% creditcard_list.unshift({id:"", desc:"Select card type"}) :>

<:-.set get_old = @{ hash,name: cgi.param(name).defined ? cgi.param(name) : hash.is_hash ? hash.$name : '' } -:>

<:-.set capitalize = @{s: s.lower.replace(/(?:^|\b)([a-z])/, @{m: m.text.upper }, 1)}:>

<:-.define dmessages -:>
  <:-.if dynamic and not(params.nomessage) -:>
  <:-.set messages = request.messages -:>
  <:-.if messages.size :>
    <div id="message">
      <:-.for message in messages :>
      <div class="alert <:-= message.class eq 'error' ? ' alert-danger' : message.class eq 'warning' ? ' alert-warning' : ' alert-success' :> alert-dismissable fade in">
        <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
        <:-= message.html |raw -:>
      </div>
      <:-.end for :> 
    </div>
  <:-.end if :>
  <:-.end if :>
<:-.end define :>

<:-.define dfield; "name":0, "object":0, "htmltype":"text", "default":'', "description":0, "save_name":0, "help":0, "width":40, "height":5, "class":"form-control", "status":0, "maxlength":0, "required":0, "options":{} :>
  <:-.set has_changed = cgi.param(name) and cgi.param(name) ne default -:>
  <:-.set status_class = errors and errors.$name ? 'has-error' : errors.size and has_changed ? 'has-success': status ? status : '' :>
  <:-.if htmltype =~ /^(checkbox|radio)$/ :>
    <div class="form-group <:= name :> <:= status_class :>">
      <div class="<:= htmltype :>">
        <label>
          <:.call "input", "name":name, "field": { "save_name":save_name, "default":default, "htmltype":htmltype, "maxlength":maxlength, "required":required }, "options":options :>
          <:= description :>
          <:.call "required_indicator", "required":required :>
        </label>
      </div>
    </div>
  <:-.else:>
    <:-.set local_options = { "class":class } :>
    <:-.set options = options["class"] ? options : options.extend(local_options) :>
    <div class="form-group <:= name :> <:= status_class :>">
      <label for="<:= name :>" class="control-label">
        <:-#.call "error_img", "field":name:>
        <:= description :>:
        <:-.call "required_indicator", "required":required :>
      </label>
      <div class="control-container">
        <:-.if htmltype =~ /^select$/ :>
        <:-.call "make_select", "name":name, "field": { "default":default, "required":required }, "list":list, "options":options :>
        <:-.else:>
        <:-.call "input", "name":name, "field": { "default":default, "width":width, "height":height, "htmltype":htmltype, "maxlength":maxlength, "required":required }, "options":options :>
        <:-.end if:>
        <:-.if help:>
        <p class="help-block small"><:= help :></p>
        <:-.end if:>
      </div>
    </div>
  <:-.end if:>
<:-.end define:>

<:-.define cfield; "htmltype":"text", "default":old(name), "description":0, "save_name":0, "help":0, "maxlength":0, "required":0, "status": 0, "options":{} :>
  <:-.set description = description ? cfg.entry("shop", "display_" _ description, description ) : cfg.entry("shop", "display_" _ name, name ) :>
  <:-.call "dfield", "name":name, "save_name":save_name, "default":default, "description":description, "htmltype":htmltype, "help":help, "status": status, "maxlength":maxlength, "required":required, "options":options :>
<:-.end define:>

<:-.define ufield; "htmltype":"text", "default":'', "description":0, "save_name":0, "help":0, "maxlength":0, "required":0, "status": 0, "options":{} :>
  <:-.set user = request.siteuser :>
  <:-.set description = description ? cfg.entry("site users", "display_" _ description, description ) : cfg.entry("site users", "display_" _ name, name ) :>
  <:-.set default = user and user.can(name) and name.lower !~ "password" ? user.$name : default :>
  <:-.set htmltype = name.lower =~ "password" ? "password" : htmltype :>
  <:-.set required = cfg.entry("site users", "require_" _ name, required ) :>
  <:-.call "dfield", "name":name, "save_name":save_name, "default":default, "description":description, "htmltype":htmltype, "help":help, "status": status, "maxlength":maxlength, "required":required, "options":options :>
<:-.end define:>

<:-.define sfield; "htmltype":"text", "default":'', "description":0, "save_name":0, "help":0, "maxlength":0, "required":0, "status": 0, "options":{} :>
  <:-.set description = description ? cfg.entry("site users", "display_" _ description, description ) : cfg.entry("site users", "display_" _ name, name ) :>
  <:-.set htmltype = name.lower =~ "password" ? "password" : htmltype :>
  <:-.call "dfield", "name":name, "save_name":save_name, "default":default, "description":description, "htmltype":htmltype, "help":help, "status": status, "maxlength":maxlength, "required":required, "options":options :>
<:-.end define:>

<:# paramaters:
  base - base url for links
  pages - the result of the bse.paged() call
:>
<:-.define pagination -:>
<:-.set sep = base =~ /\?/ ? "&" : "?" :>
<:-.set base = base _ sep :>
  <:-.if pages and pages.pages.size > 1:>
  <nav>
    <p class="pagination">Page <:= pages.page :> of <:= pages.pagecount :></p>
    <ul class="pagination">
      <:-.if pages.previous_page :>
      <li><a href="<:= base :><:= pages.pname |uri:>=<:= pages.previous_page |uri:>&amp;<:= pages.ppname |uri:>=<:= pages.pp |uri:>" aria-label="Previous"><i class="fa fa-angle-left"></i></a></li>
      <:-.else :>
      <li class="disabled"><span><i class="fa fa-angle-left"></i></span></li>
      <:-.end if :>
      <:-.for p in pages.pages :>
      <:-.if p.link :>
      <li><a href="<:= base :><:= pages.pname |uri:>=<:= p.page |uri:>&amp;<:= pages.ppname |uri:>=<:= pages.pp |uri:>"><:= p.page :></a></li>
      <:-.elsif !p.link and !p.gap :>
      <li class="active"><span aria-label="Current"><:= p.page :></span></li>
      <:-.else :>
      <li class="disabled"><span><:= p.page :></span></li>
      <:-.end if :>
      <:-.end for :>
      <:-.if pages.next_page :>
      <li><a href="<:= base :><:= pages.pname |uri:>=<:= pages.next_page |uri:>&amp;<:= pages.ppname |uri:>=<:= pages.pp |uri:>" aria-label="Next"><i class="fa fa-angle-right"></i></a></li>
      <:-.else :>
      <li class="disabled"><span><i class="fa fa-angle-right"></i></span></li>
      <:-.end if :>
    </ul>
  </nav>
  <:-.end if:>
<:-.end define :>

